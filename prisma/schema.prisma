// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
  // intialSetupDatabaseUrl = env("INITIAL_SETUP_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  // profileId    String   
}

model User {
  id             String        @id @default(cuid())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  profile        Profile?      
  onboarded      Boolean       @default(false)
  communities    Community[]
  communityAdmin  CommunityAdmin?  
  posts          Post[]
 
}

model Community {
  id         String    @id @default(cuid())
  members    User[]
  commName   String?
  commType   String?
  commAbout  String?
  posts      Post[]
  communityAdmin CommunityAdmin @relation(fields: [adminId], references: [id])
  adminId        String @unique
}

model CommunityAdmin {
   id         String    @id @default(cuid())
  manager      Community?
  admin      User @relation(fields: [userId], references: [id]) 
  userId     String @unique
  
}



model Post {
  id       String    @id @default(cuid())
  author   User      @relation(fields: [authorId], references: [id])
  authorId String @unique
  community  Community  @relation(fields: [communityId], references: [id])
  communityId  String @unique 
}



model Profile {
  id       String    @id @default(cuid())
  bio      String?
  username  String @unique
  interest String?
  userCategory String?
  userId      String @unique
  user         User @relation(fields: [userId], references: [id]) 
  // sessions       Session[]
}



// model CommunityAdmin {
//   id  String    @id @default(cuid())
//   user User @relation(fields: [managerId], references: [id]) 
//   community Community @relation(fields: [communityId], references: [id])
//   managerId String @unique
//   communityId  String @unique 
  

// }

// model CommunityMember {
//    id  String    @id @default(cuid())
//    user User @relation(fields: [userId], references: [id])
//    community Community @relation(fields: [communityId], references: [id])
//    communityId  String @unique 
//    userId      String @unique


// }


// model Community {
//   id  String    @id @default(cuid())
//   commName String?
//   commType String?
//   commAbout String?
//   managers   CommunityAdmin[]
//   members  CommunityMember[]
//   // manager   User @relation(fields: [managerId], references: [id]) 
//   // managerId      String @unique
// }


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}